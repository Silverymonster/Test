<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"> 
	<!-- 开启Spring注解 -->
<context:annotation-config></context:annotation-config>
	<!-- 自动扫描spring在JAVA中的注解 -->
	<context:component-scan base-package="com.jiale">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<!-- 读取 properties 文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:druid.properties</value>
		</property>
	</bean>

	<!-- Druid数据源配置 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName"
			value="${druid.driverClassName}" />
		<property name="url" value="${druid.url}" />
		<property name="username" value="${druid.username}" />
		<property name="password" value="${druid.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- ORM的配置套路 -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations"
			value="classpath:com/jiale/mapper/*.xml"></property>
		<!-- <property name="configLocation" value="classpath:mybatis.xml"></property> -->
	</bean>
	<!-- mybatis的Template -->
	<bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory"></constructor-arg>
	</bean>
	
	<!-- 给SqlSessionDaoSupport做注入 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> <property 
		name="sqlSessionFactory" ref="sqlSessionFactory"></property> <property name="basePackage" 
		value="jiale.dao"></property> </bean> -->


	<!-- 配置缓存管理器 -->
	    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
       <!-- 指定 ehcache的配置文件-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>
   <!-- 配置 进行授权和认证的Realm -->
   <bean id="myRealm"  class="com.jiale.shiro.MyRealm" init-method="setCredentialsMatcher"></bean>
   
     <!-- 配置 Shiro 的securityManager Bean -->   
     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="realm" ref="myRealm"/>
    </bean>
    
     <!-- 配置Bean 后置处理器： 会自动的调用和Spring整合后各个组件的生命周期方法 -->   
      <bean id="lifecycleBeanPostProcessor" 
      class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
        
        <!-- 配置 shiroFilter bean ：该bean 的 id必须和web.xml 文件中的配置的shiro Filter 的name 一致 -->
        <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- 装配securityManager -->
        <property name="securityManager" ref="securityManager"/>
        <!-- 配置登录页面 -->
        <property name="loginUrl" value="/login.html"/>
        <!-- 登录成功后的页面 -->
        <!-- <property name="successUrl" value="/list.html"/> -->
        <!-- 当用户访问未对其授权的资源时，所显示的页面 -->
        <property name="unauthorizedUrl" value="/noroot.html"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!-- 具体配置需要拦截哪些URL，以及访问对应的URL时使用Shiro的什么Filter进行拦截 -->
        <property name="filterChainDefinitions">
            <value>
            	<!-- 配置登出：使用logout过滤器 -->
               /*=anon
            </value>
        </property>
    </bean>
	
	
	
	
	
	


	<!--创建一个Spring Bean的名称springSessionRepositoryFilter实现过滤器。 筛选器负责将HttpSession实现替换为Spring会话支持。 
		在这个实例中，Spring会话得到了Redis的支持。支持Spring Session代替HttpSession发挥作用。 HttpSession不再发挥作用，而是通过过滤器使用redis直接操作Session -->

	<bean
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" />

	<!-- redis config start -->
	<!-- 配置JedisPoolConfig实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">

		<!-- 最大能够保持idel状态的对象数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 控制一个pool可分配多少个jedis实例 -->
		<property name="maxTotal" value="${redis.maxActive}" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<!-- 返回连接时，检测连接是否成功 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>
	<!--创建了一个RedisConnectionFactory，它将Spring会话连接到Redis服务器。我们配置连接到默认端口(6379)上的本地主机！ -->

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="database" value="${redis.dbIndex}" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<!-- 配置RedisTemplate 模板 -->
	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory"
			ref="jedisConnectionFactory" />
	</bean>

	<!-- 配置RedisCacheManager 缓存管理 自定义redis工具类,在需要缓存的地方注入此类 -->
	<bean id="redisCacheManager"
		class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations"
			ref="redisTemplate" />
		<property name="defaultExpiration"
			value="${redis.expiration}" />
	</bean>
  
</beans>
